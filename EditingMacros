Option Explicit

Sub lyWords()
    ' Highlights -ly words used in tags
    'This macro will search for and highlight the specified "-ly" words in bright green throughout the active document in Microsoft Word.

    Dim range As range
    Dim i As Long
    Dim TargetList As Variant

    ' List of -ly words to be highlighted
    TargetList = Array("angrily", "cautiously", "happily", "sadly", "unhappily")
    
    ' Iterate over each word in the list
    For i = 0 To UBound(TargetList)
        Set range = ActiveDocument.range
        With range.Find
            .Text = TargetList(i)
            .Format = True
            .MatchCase = False
            .MatchWholeWord = True
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
            Do While .Execute(Forward:=True) = True
                range.HighlightColorIndex = wdBrightGreen
                range.Collapse Direction:=wdCollapseEnd
            Loop
        End With
    Next i
End Sub

Sub TellingWords()
    ' Highlights telling words
    ' Highlight specific "telling" words in pink to help identify and potentially replace them with more descriptive language

    Dim range As range
    Dim i As Long
    Dim TargetList As Variant

    ' List of telling words to be highlighted
    TargetList = Array("was", "were", "when", "as", "the sound of", "could see", "saw", "notice", "noticed", "noticing", _
                 "consider", "considered", "considering", "smell", "smelled", "heard", "felt", "tasted", "knew", _
                 "realize", "realized", "realizing", "think", "thought", "thinking", "believe", "believed", _
                 "believing", "wonder", "wondered", "wondering", "recognize", "recognized", "recognizing", _
                 "hope", "hoped", "hoping", "supposed", "pray", "prayed", "praying", "angrily")
    
    ' Iterate over each word in the list
    For i = 0 To UBound(TargetList)
        Set range = ActiveDocument.range
        With range.Find
            .Text = TargetList(i)
            .Format = True
            .MatchCase = False
            .MatchWholeWord = True
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
            Do While .Execute(Forward:=True) = True
                range.HighlightColorIndex = wdPink
                range.Collapse Direction:=wdCollapseEnd
            Loop
        End With
    Next i
End Sub


Sub PlainLanguage()
    ' Highlights complex words
    'The macro PlainLanguage highlights complex words in a Microsoft Word document to help identify and simplify them.

    Dim range As range
    Dim i As Long
    Dim TargetListPart1 As Variant
    Dim TargetListPart2 As Variant
    Dim TargetListPart3 As Variant
    Dim TargetListPart4 As Variant
    Dim TargetListPart5 As Variant
    Dim TargetListPart6 As Variant
    Dim TargetListPart7 As Variant
    Dim TargetListPart8 As Variant
    Dim TargetList As Variant

    ' Split the list into smaller parts
    TargetListPart1 = Array("/", "a number of", "accompany", "accomplish", "accorded", "accordingly", "accrue", "accurate", _
                      "additional", "address", "addressees", "addressees are requested", "adjacent to", "advantageous", _
                      "adversely impact on", "advise", "afford an opportunity", "aircraft", "allocate", "anticipate", _
                      "apparent", "appreciable", "appropriate", "approximate", "arrive onboard", "as a means of", _
                      "as prescribed by", "ascertain", "assist", "assistance", "at the present time", "attain", "attempt")
    
    TargetListPart2 = Array("basis", "be advised", "benefit", "by means of", "capability", "caveat", "close proximity", _
                      "combat environment", "combined", "commence", "comply with", "component", "comprise", "concerning", _
                      "consequently", "consolidate", "constitutes", "contains", "convene", "currently", "deem", "delete", _
                      "demonstrate", "depart", "designate", "desire", "determine", "disclose", "discontinue", "disseminate")
    
    TargetListPart3 = Array("due to the fact that", "during the period", "effect modifications", "elect", "eliminate", "employ", _
                      "encounter", "endeavor", "ensure", "enumerate", "equipments", "equitable", "establish", "etc.", _
                      "evidenced", "evident", "exhibit", "expedite", "expeditious", "expend", "expertise", "expiration", _
                      "facilitate", "failed to", "feasible", "females", "finalize", "for a period of", "forfeit", "forward")
    
    TargetListPart4 = Array("frequently", "function", "furnish", "has a requirement for", "herein", "heretofore", "herewith", _
                      "however", "identical", "identify", "immediately", "impacted", "implement", "in a timely manner", _
                      "in accordance with", "in addition", "in an effort to", "in as much as", "in lieu of", "in order that", _
                      "in order to", "in regard to", "in relation to", "in the amount of", "in the event of", "in the near future")
    
    TargetListPart5 = Array("in the process of", "in view of", "in view of the above", "inception", "incumbent upon", "indicate", _
                      "indication", "initial", "initiate", "inter alia", "interface", "interpose no objection", "is applicable to", _
                      "is authorized to", "is in consonance with", "is responsible for", "it appears", "it is", "it is essential", _
                      "it is requested", "liaison", "limited number", "magnitude", "maintain", "maximum", "methodology")
    
    TargetListPart6 = Array("minimize", "minimum", "modify", "monitor", "necessitate", "notify", "not later than", "notwithstanding", _
                      "numerous", "objective", "obligate", "observe", "operate", "optimum", "option", "parameters", "participate", _
                      "perform", "permit", "pertaining to", "portion", "possess", "practicable", "preclude", "previous", _
                      "previously", "prior to", "prioritize", "proceed", "procure", "proficiency", "promulgate", "provide")
    
    TargetListPart7 = Array("provided that", "provides guidance for", "purchase", "pursuant to", "reflect", "regarding", "relative to", _
                      "relocate", "remain", "remainder", "remuneration", "render", "represents", "request", "require", _
                      "requirement", "reside", "retain", "said", "selection", "set forth in", "similar to", "solicit", "some", _
                      "state-of-the-art", "subject", "submit", "subsequent", "subsequently", "substantial", "successfully complete")
    
    TargetListPart8 = Array("such", "sufficient", "take action to", "terminate", "the month of", "the undersigned", "the use of", _
                      "there are", "there is", "therefore", "therein", "thereof", "this activity", "time period", "timely", _
                      "transmit", "type", "under the provisions of", "until such time as", "utilization", "utilize", "validate", _
                      "viable", "vice", "warrant", "whereas", "with reference to", "with the exception of", "witnessed", "your office")
    
    ' Combine all parts into one array
    TargetList = JoinArrays(TargetListPart1, TargetListPart2, TargetListPart3, TargetListPart4, _
                 TargetListPart5, TargetListPart6, TargetListPart7, TargetListPart8)
    
    For i = 0 To UBound(TargetList)
        Set range = ActiveDocument.range
        With range.Find
            .Text = TargetList(i)
            .Format = True
            .MatchCase = False
            .MatchWholeWord = True
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
            Do While .Execute(Forward:=True) = True
                range.HighlightColorIndex = wdYellow
                range.Collapse Direction:=wdCollapseEnd
            Loop
        End With
    Next i
End Sub

Function JoinArrays(ParamArray Arrays() As Variant) As Variant
    Dim i As Long, j As Long, k As Long
    Dim totalLength As Long
    Dim result() As Variant

    ' Calculate the total length of the combined array
    totalLength = 0
    For i = LBound(Arrays) To UBound(Arrays)
        totalLength = totalLength + UBound(Arrays(i)) - LBound(Arrays(i)) + 1
    Next i
    
    ' Initialize the result array
    ReDim result(0 To totalLength - 1)
    
    ' Copy the elements from each array to the result array
    k = 0
    For i = LBound(Arrays) To UBound(Arrays)
        For j = LBound(Arrays(i)) To UBound(Arrays(i))
            result(k) = Arrays(i)(j)
            k = k + 1
        Next j
    Next i
    
    JoinArrays = result
End Function


Sub EliminateMultipleSpaces()
    On Error GoTo ERRORHANDLER
    
    ' Eliminate multiple spaces between words
    With Selection
        .HomeKey Unit:=wdStory
        With .Find
            .ClearFormatting
            .Replacement.ClearFormatting
            ' Look for excessive spaces between words
            .Text = " [ ]@([! ])"
            ' Replace excessive spaces with one space
            .Replacement.Text = " \1"
            .MatchWildcards = True
            .Wrap = wdFindStop
            .Format = False
            .Forward = True
            ' Execute the replace
            .Execute Replace:=wdReplaceAll
        End With
        
        ' Eliminate multiple spaces after a paragraph mark
        With .Find
            ' Look for excessive spaces after a paragraph mark
            .Text = "^p "
            ' Replace with single paragraph mark
            .Replacement.Text = "^p"
            .MatchWildcards = False
            .Wrap = wdFindStop
            .Format = False
            .Forward = True
            ' Execute the replace
            .Execute Replace:=wdReplaceAll
        End With
    End With
    
    Exit Sub
    
ERRORHANDLER:
    ' Handle errors and reset selection
    With Selection
        .ExtendMode = False
        .HomeKey Unit:=wdStory
    End With
    MsgBox "An error occurred: " & Err.Description, vbCritical
End Sub


Sub NeedlessWords()
    ' Deletes unnecessary words

    Dim range As range
    Dim i As Long
    Dim StrFnd As String
    Dim wordsArray() As String

    StrFnd = "then,almost,about,begin,start,decided,planned,very,sat,truly,rather,fairly,really,somewhat,up,down,over,together,behind,out,inorder,around,only,just,even"
    wordsArray = Split(StrFnd, ",")
    
    For i = 0 To UBound(wordsArray)
        Set range = ActiveDocument.range
        With range.Find
            .Text = wordsArray(i)
            .Format = True
            .MatchCase = False
            .MatchWholeWord = True
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
            Do While .Execute(Forward:=True) = True
                range.Delete
            Loop
        End With
    Next i
End Sub


Sub PassiveWords()
    ' Highlights passive words

    Dim range As range
    Dim i As Long
    Dim TargetList As Variant

    TargetList = Array("be", "being", "been", "am", "is", "are", "was", "were", "has", "have", "had", "do", "did", "does", "can", "could", "shall", "should", "will", "would", "might", "must", "may")
    
    For i = 0 To UBound(TargetList)
        Set range = ActiveDocument.range
        With range.Find
            .Text = TargetList(i)
            .Format = True
            .MatchCase = False
            .MatchWholeWord = True
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
            Do While .Execute(Forward:=True) = True
                range.HighlightColorIndex = wdBrightGreen
            Loop
        End With
    Next i
End Sub

Sub AcceptAllProofingChanges()
    Dim change As Revision
    ' Constants for revision types
    Const wdRevisionSpelling As Integer = 1
    Const wdRevisionGrammar As Integer = 2

    For Each change In ActiveDocument.Revisions
        If change.Type = wdRevisionSpelling Or change.Type = wdRevisionGrammar Then
            change.Accept
        End If
    Next change
End Sub

Sub GrabbingCrutches()
    ' GrabbingCrutches Macro
    'The macro is intended to search for occurrences of a specific word in one document and copy the sentences containing that word to another document.

    Dim r As range
    Dim myString As String
    Dim ThisDoc As Document
    Dim OtherDoc As Document

    ' Notify user to open a new document for the results and close others
    MsgBox "Remember to open a new document for the results, and close others!"
    
    ' Check if exactly two documents are open
    If Documents.Count <> 2 Then
        MsgBox "Must have two (and only two!) documents open."
        Exit Sub
    End If
    
    ' Identify the active document and the other document
    Set ThisDoc = ActiveDocument
    If ThisDoc Is Documents(1) Then
        Set OtherDoc = Documents(2)
    Else
        Set OtherDoc = Documents(1)
    End If
    
    ' Define the search term
    myString = "nod"
    
    ' Set the range for the active document
    Set r = ThisDoc.range
    With r.Find
        Do While .Execute(FindText:=myString, MatchAllWordForms:=True, Forward:=True) = True
            r.Expand Unit:=wdSentence
            r.Copy
            OtherDoc.range.InsertAfter r.Text & vbCrLf
            r.Collapse Direction:=wdCollapseEnd
        Loop
    End With
    
    MsgBox "GrabbingCrutches macro completed!"
End Sub

Sub Confusables()
    ' Highlights confusables
    ' This macro will highlight the specified commonly confused words in violet throughout the active document in Microsoft Word.

    Dim range As range
    Dim i As Long
    Dim TargetList As Variant

    ' Combined list of confusable words
    TargetList = Array("accept", "except", "adverse", "averse", "advice", "advise", "affect", "effect", _
                 "aisle", "isle", "altogether", "all together", "along", "a long", "aloud", "allowed", _
                 "altar", "alter", "amoral", "immoral", "appraise", "apprise", "assent", "ascent", _
                 "aural", "oral", "awhile", "a while", "balmy", "barmy", "bare", "bear", "bated", _
                 "baited", "bazaar", "bizarre", "birth", "berth", "born", "borne", "bow", "bough", _
                 "break", "brake", "broach", "brooch", "canvas", "canvass", "censure", "censor", _
                 "cereal", "serial", "chord", "cord", "climactic", "climatic", "coarse", "course", _
                 "complacent", "complaisant", "complement", "compliment", "council", "counsel", "cue", _
                 "queue", "curb", "kerb", "currant", "current", "defuse", "diffuse", "desert", _
                 "dessert", "discreet", "discrete", "disinterested", "uninterested", "draught", "draft", _
                 "draw", "drawer", "duel", "dual", "elicit", "illicit", "ensure", "insure", "envelop", _
                 "envelope", "exercise", "exorcise", "fawn", "faun", "flair", "flare", "flaunt", "flout", _
                 "flounder", "founder", "forbear", "forebear", "forward", "foreword", "freeze", "frieze", _
                 "grisly", "grizzly", "hoard", "horde", "imply", "infer", "loathe", "loath", "lose", _
                 "loose", "meter", "metre", "militate", "mitigate", "palate", "palette", "pedal", "peddle", _
                 "poll", "pole", "pour", "pore", "practice", "practise", "prescribe", "proscribe", _
                 "principle", "principal", "sceptic", "septic", "sight", "site", "stationary", "stationery", _
                 "story", "storey", "titillate", "titivate", "tortuous", "torturous", "wreath", "wreathe")
    
    For i = 0 To UBound(TargetList)
        Set range = ActiveDocument.range
        With range.Find
            .Text = TargetList(i)
            .Format = True
            .MatchCase = False
            .MatchWholeWord = True
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = True
            Do While .Execute(Forward:=True) = True
                range.HighlightColorIndex = wdViolet
                range.Collapse Direction:=wdCollapseEnd
            Loop
        End With
    Next i
End Sub

